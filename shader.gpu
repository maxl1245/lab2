
// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texCoord;
uniform mat4 ModelViewProjectionMatrix;
varying vec2 v_texcoord;

attribute vec3 a_normal;
varying vec3 v_normal;

uniform mat4 u_worldViewProjection;
uniform mat4 u_world;

void main() {
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    v_texcoord = texCoord;
	v_normal = mat3(u_world) * a_normal;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform sampler2D u_texture;
uniform float fColorCoef;

varying vec2 v_texcoord;
uniform vec4 color;

varying vec3 v_normal;
uniform vec3 u_reverseLightDirection;
uniform vec4 u_color;

void main() {
	vec3 normal = normalize(v_normal);
	float light = dot(normal, u_reverseLightDirection);
	
    gl_FragColor = color*fColorCoef + texture2D(u_texture, v_texcoord)*(1.0-fColorCoef);
	
	gl_FragColor.rgb *= light;
}`;